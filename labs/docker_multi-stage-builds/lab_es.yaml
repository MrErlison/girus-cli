apiVersion: v1
kind: ConfigMap
metadata:
  name: docker-multi-stage-builds-lab-es
  namespace: girus
  labels:
    app: girus-lab-template
data:
  lab.yaml: |
    name: docker-multi-stage-builds-es
    title: "Multi-stage Builds no Docker"
    description: "aprende a crear imagens Docker otimizadas usando multi-stage builds, reduzindo o tamanho final e melhorando a segurança. Este laboratorio guiado explora técnicas avançadas de construção de imagens Docker para aplicações modernas."
    duration: 30m
    image: "linuxtips/girus-devops:0.1"
    privileged: true
    tasks:
      - name: "creando un Multi-stage Build Básico"
        description: "aprende os conceitos básicos de multi-stage builds."
        steps:
          - description: "crea un Dockerfile com multi-stage build"
            command: "echo -e 'FROM golang:1.21 AS builder\nWORKDIR /app\nCOPY . .\nRUN go build -o main .\n\nFROM alpine:latest\nWORKDIR /app\nCOPY --from=builder /app/main .\nCMD [\"./main\"]' > Dockerfile"
            expectedOutput: ""
            hint: "crea un Dockerfile com dois estágios: build e runtime"

          - description: "crea un archivo Go simples"
            command: "echo -e 'package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello from multi-stage build!\")\n}' > main.go"
            expectedOutput: ""
            hint: "crea un programa Go básico"

          - description: "Construa a imagen"
            command: "docker build -t multi-stage-app ."
            expectedOutput: "Successfully built"
            hint: "Use o comando docker build para construir a imagen"

      - name: "Otimização de Imagens"
        description: "aprende técnicas para otimizar imagens Docker."
        steps:
          - description: "verifique o tamanho da imagen"
            command: "docker images multi-stage-app"
            expectedOutput: "multi-stage-app"
            hint: "Use o comando docker images para ver o tamanho"

          - description: "crea uma versão otimizada do Dockerfile"
            command: "echo -e 'FROM golang:1.21-alpine AS builder\nWORKDIR /app\nCOPY . .\nRUN go build -ldflags=\"-s -w\" -o main .\n\nFROM scratch\nCOPY --from=builder /app/main .\nCMD [\"./main\"]' > Dockerfile.optimized"
            expectedOutput: ""
            hint: "crea un Dockerfile otimizado usando alpine e scratch"

          - description: "Construa a versão otimizada"
            command: "docker build -t multi-stage-app-optimized -f Dockerfile.optimized ."
            expectedOutput: "Successfully built"
            hint: "Construa a versão otimizada da imagen"

      - name: "Multi-stage Builds com Dependências"
        description: "Implemente multi-stage builds com administración de dependências."
        steps:
          - description: "crea un Dockerfile para uma aplicación Node.js"
            command: "echo -e 'FROM node:18 AS deps\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\n\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\nRUN npm run build\n\nFROM node:18-alpine\nWORKDIR /app\nCOPY --from=builder /app/dist ./dist\nCOPY --from=deps /app/node_modules ./node_modules\nCMD [\"node\", \"dist/index.js\"]' > Dockerfile.node"
            expectedOutput: ""
            hint: "crea un Dockerfile para uma aplicación Node.js com três estágios"

          - description: "crea un package.json básico"
            command: "echo -e '{\n  \"name\": \"node-app\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"build\": \"echo \\\"Build completed\\\"\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.2\"\n  }\n}' > package.json"
            expectedOutput: ""
            hint: "crea un package.json com uma dependência"

          - description: "Construa a imagen Node.js"
            command: "docker build -t node-multi-stage -f Dockerfile.node ."
            expectedOutput: "Successfully built"
            hint: "Construa a imagen Node.js com multi-stage build"
